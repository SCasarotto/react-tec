{"ast":null,"code":"import _objectSpread from \"/Users/stuartcasarotto/Documents/38thStreetStudios/Work/react-tec/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/stuartcasarotto/Documents/38thStreetStudios/Work/react-tec/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/stuartcasarotto/Documents/38thStreetStudios/Work/react-tec/src/lib/Form/TEFileManagerRow/TEFileManagerRow.js\";\n//\n//TE Version 0.3.0\n//\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TELabel from './../TELabel';\nimport { WrapperRow, FileRowWrapper, FileWrapper, FileName, DownloadFileButton, DownloadImageButtonIcon, ClearFileButton, ClearFileButtonIcon, Input } from './styledComponents';\n\nvar TEFileManagerRow = function TEFileManagerRow(props) {\n  var _useState = useState('inputKey'),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputKey = _useState2[0],\n      setInputKey = _useState2[1];\n\n  var onFileChange = function onFileChange(fileArray) {\n    var onUpload = props.onUpload;\n    var data = {\n      fileArray: fileArray\n    };\n    onUpload(data).then(function () {\n      setInputKey(new Date().getTime());\n    }).catch(function (error) {\n      console.log(error);\n      setInputKey(new Date().getTime());\n    });\n  };\n\n  var size = props.size,\n      last = props.last,\n      title = props.title,\n      fileSrc = props.fileSrc,\n      maxNumber = props.maxNumber,\n      accept = props.accept,\n      pattern = props.pattern,\n      disabled = props.disabled,\n      onRemove = props.onRemove,\n      required = props.required,\n      labelForKey = props.labelForKey;\n  var fileSrcArray = [];\n\n  if (fileSrc) {\n    for (var uid in fileSrc) {\n      fileSrcArray.push(_objectSpread({}, fileSrc[uid], {\n        uid: uid\n      }));\n    }\n  }\n\n  var labelText = title;\n\n  if (maxNumber > 1 && fileSrcArray) {\n    labelText = \"\".concat(title, \" (\").concat(fileSrcArray.length, \"/\").concat(maxNumber, \")\");\n  }\n\n  return React.createElement(WrapperRow, {\n    size: size,\n    last: last,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(TELabel, {\n    htmlFor: labelForKey,\n    labelText: labelText,\n    required: required,\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(FileRowWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, fileSrcArray && fileSrcArray.map(function (imgSrcData) {\n    var src = imgSrcData.src,\n        uid = imgSrcData.uid,\n        filename = imgSrcData.filename,\n        fileEnding = imgSrcData.fileEnding,\n        path = imgSrcData.path;\n    return React.createElement(FileWrapper, {\n      key: uid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(FileName, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, filename, \".\", fileEnding), React.createElement(DownloadFileButton, {\n      href: src,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      key: uid,\n      download: filename,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(DownloadImageButtonIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), React.createElement(ClearFileButton, {\n      onClick: function onClick() {\n        return onRemove({\n          uid: uid,\n          path: path\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(ClearFileButtonIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })));\n  }), (maxNumber === 0 || !fileSrcArray || fileSrcArray && fileSrcArray.length < maxNumber) && React.createElement(Input, {\n    key: inputKey //Used to reset the input\n    ,\n    id: labelForKey,\n    onChange: onFileChange,\n    disabled: disabled,\n    required: required // multiple={maxNumber === 0 || maxNumber > 1} //For simplicity making it a single file\n    ,\n    accept: accept,\n    pattern: pattern,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })));\n};\n\nTEFileManagerRow.propTypes = {\n  //Row\n  size: PropTypes.string,\n  last: PropTypes.bool,\n  //Input\n  onUpload: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n  accept: PropTypes.string,\n  // accept: PropTypes.Regexp, //Don't know protype for regex\n  maxNumber: PropTypes.number,\n  onChangeKey: PropTypes.string,\n  disabled: PropTypes.bool,\n  //Both\n  labelForKey: PropTypes.string\n};\nTEFileManagerRow.defaultProps = {\n  accept: '.',\n  pattern: '.',\n  maxNumber: 0\n};\nexport default TEFileManagerRow;","map":{"version":3,"sources":["/Users/stuartcasarotto/Documents/38thStreetStudios/Work/react-tec/src/lib/Form/TEFileManagerRow/TEFileManagerRow.js"],"names":["React","useState","PropTypes","TELabel","WrapperRow","FileRowWrapper","FileWrapper","FileName","DownloadFileButton","DownloadImageButtonIcon","ClearFileButton","ClearFileButtonIcon","Input","TEFileManagerRow","props","inputKey","setInputKey","onFileChange","fileArray","onUpload","data","then","Date","getTime","catch","error","console","log","size","last","title","fileSrc","maxNumber","accept","pattern","disabled","onRemove","required","labelForKey","fileSrcArray","uid","push","labelText","length","map","imgSrcData","src","filename","fileEnding","path","propTypes","string","bool","func","isRequired","number","onChangeKey","defaultProps"],"mappings":"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","sourcesContent":["//\n//TE Version 0.3.0\n//\n\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport TELabel from './../TELabel'\n\nimport {\n    WrapperRow,\n    FileRowWrapper,\n    FileWrapper,\n    FileName,\n    DownloadFileButton,\n    DownloadImageButtonIcon,\n    ClearFileButton,\n    ClearFileButtonIcon,\n    Input,\n} from './styledComponents'\n\nconst TEFileManagerRow = (props) => {\n    const [inputKey, setInputKey] = useState('inputKey')\n\n    const onFileChange = (fileArray) => {\n        const { onUpload } = props\n        const data = { fileArray }\n        onUpload(data)\n            .then(() => {\n                setInputKey(new Date().getTime())\n            })\n            .catch((error) => {\n                console.log(error)\n                setInputKey(new Date().getTime())\n            })\n    }\n\n    const {\n        //Row\n        size,\n        last,\n\n        //Label\n        title,\n\n        //Input\n        fileSrc,\n        maxNumber,\n        accept,\n        pattern,\n        disabled,\n\n        onRemove,\n\n        //Both\n        required,\n        labelForKey,\n    } = props\n\n    const fileSrcArray = []\n    if (fileSrc) {\n        for (const uid in fileSrc) {\n            fileSrcArray.push({ ...fileSrc[uid], uid })\n        }\n    }\n\n    let labelText = title\n    if (maxNumber > 1 && fileSrcArray) {\n        labelText = `${title} (${fileSrcArray.length}/${maxNumber})`\n    }\n\n    return (\n        <WrapperRow size={size} last={last}>\n            <TELabel\n                htmlFor={labelForKey}\n                labelText={labelText}\n                required={required}\n                disabled={disabled}\n            />\n            <FileRowWrapper>\n                {fileSrcArray &&\n                    fileSrcArray.map((imgSrcData) => {\n                        const { src, uid, filename, fileEnding, path } = imgSrcData\n                        return (\n                            <FileWrapper key={uid}>\n                                <FileName>\n                                    {filename}.{fileEnding}\n                                </FileName>\n                                <DownloadFileButton\n                                    href={src}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                    key={uid}\n                                    download={filename}\n                                >\n                                    <DownloadImageButtonIcon />\n                                </DownloadFileButton>\n                                <ClearFileButton onClick={() => onRemove({ uid, path })}>\n                                    <ClearFileButtonIcon />\n                                </ClearFileButton>\n                            </FileWrapper>\n                        )\n                    })}\n                {(maxNumber === 0 ||\n                    !fileSrcArray ||\n                    (fileSrcArray && fileSrcArray.length < maxNumber)) && (\n                    <Input\n                        key={inputKey} //Used to reset the input\n                        id={labelForKey}\n                        onChange={onFileChange}\n                        disabled={disabled}\n                        required={required}\n                        // multiple={maxNumber === 0 || maxNumber > 1} //For simplicity making it a single file\n                        accept={accept}\n                        pattern={pattern}\n                    />\n                )}\n            </FileRowWrapper>\n        </WrapperRow>\n    )\n}\n\nTEFileManagerRow.propTypes = {\n    //Row\n    size: PropTypes.string,\n    last: PropTypes.bool,\n\n    //Input\n    onUpload: PropTypes.func.isRequired,\n    onRemove: PropTypes.func.isRequired,\n    accept: PropTypes.string,\n    // accept: PropTypes.Regexp, //Don't know protype for regex\n    maxNumber: PropTypes.number,\n    onChangeKey: PropTypes.string,\n    disabled: PropTypes.bool,\n\n    //Both\n    labelForKey: PropTypes.string,\n}\n\nTEFileManagerRow.defaultProps = {\n    accept: '.',\n    pattern: '.',\n    maxNumber: 0,\n}\n\nexport default TEFileManagerRow\n"]},"metadata":{},"sourceType":"module"}