{"ast":null,"code":"import _toConsumableArray from \"/Users/stuartcasarotto/Documents/38thStreetStudios/Work/react-tec/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/stuartcasarotto/Documents/38thStreetStudios/Work/react-tec/src/lib/Form/TECheckboxGroup/TECheckboxGroup.js\";\n//\n//TE Version 0.3.0\n//\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TELabel from './../TELabel';\nimport { Container, InputWrapper, RowWrarpper, Checkbox, Label } from './styledComponents';\n\nvar manipulateRowData = function manipulateRowData(_ref) {\n  var rowData = _ref.rowData,\n      _ref$labelForKey = _ref.labelForKey,\n      labelForKey = _ref$labelForKey === void 0 ? '' : _ref$labelForKey;\n\n  //Allowing For Greater Shorthand\n  if (typeof rowData === 'string') {\n    var label = rowData;\n    var value = rowData;\n    var key = labelForKey + rowData;\n    return {\n      label: label,\n      value: value,\n      key: key\n    };\n  } else if (typeof rowData === 'object') {\n    var _label = rowData.label,\n        _rowData$value = rowData.value,\n        _value = _rowData$value === void 0 ? _label : _rowData$value,\n        _rowData$key = rowData.key,\n        _key = _rowData$key === void 0 ? labelForKey + _label : _rowData$key;\n\n    return {\n      label: _label,\n      value: _value,\n      key: _key\n    };\n  }\n};\n\nvar TECheckboxGroup = function TECheckboxGroup(props) {\n  var handleInputChange = function handleInputChange(event) {\n    var checkedValues = props.checkedValues,\n        onChange = props.onChange;\n    var _event$target = event.target,\n        value = _event$target.value,\n        id = _event$target.id;\n\n    var newValues = _toConsumableArray(checkedValues);\n\n    if (checkedValues) {\n      if (checkedValues.includes(value)) {\n        newValues = newValues.filter(function (e) {\n          return e !== value;\n        });\n      } else {\n        newValues.push(value);\n      }\n    }\n\n    onChange(newValues, id);\n  };\n\n  var size = props.size,\n      last = props.last,\n      title = props.title,\n      required = props.required,\n      rowSize = props.rowSize,\n      disabled = props.disabled,\n      checkedValues = props.checkedValues,\n      buttonArray = props.buttonArray,\n      labelForKey = props.labelForKey;\n  return React.createElement(Container, {\n    size: size,\n    last: last,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(TELabel, {\n    disabled: disabled,\n    required: required,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, title), React.createElement(InputWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, buttonArray && buttonArray.map(function (rowData) {\n    var _manipulateRowData = manipulateRowData({\n      rowData: rowData,\n      labelForKey: labelForKey\n    }),\n        label = _manipulateRowData.label,\n        value = _manipulateRowData.value,\n        key = _manipulateRowData.key;\n\n    return React.createElement(RowWrarpper, {\n      key: key,\n      size: rowSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      value: value,\n      onChange: handleInputChange,\n      id: key,\n      checked: checkedValues && checkedValues.includes(value),\n      disabled: disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Label, {\n      htmlFor: key,\n      disabled: disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, label));\n  })));\n};\n\nTECheckboxGroup.propTypes = {\n  scrolling: PropTypes.bool,\n  buttonArray: PropTypes.array.isRequired,\n  checkedValues: PropTypes.array.isRequired,\n  labelForKey: PropTypes.string\n};\nTECheckboxGroup.defaultProps = {\n  scrolling: false\n};\nexport default TECheckboxGroup;","map":{"version":3,"sources":["/Users/stuartcasarotto/Documents/38thStreetStudios/Work/react-tec/src/lib/Form/TECheckboxGroup/TECheckboxGroup.js"],"names":["React","PropTypes","TELabel","Container","InputWrapper","RowWrarpper","Checkbox","Label","manipulateRowData","rowData","labelForKey","label","value","key","TECheckboxGroup","props","handleInputChange","event","checkedValues","onChange","target","id","newValues","includes","filter","e","push","size","last","title","required","rowSize","disabled","buttonArray","map","propTypes","scrolling","bool","array","isRequired","string","defaultProps"],"mappings":"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","sourcesContent":["//\n//TE Version 0.3.0\n//\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nimport TELabel from './../TELabel'\n\nimport { Container, InputWrapper, RowWrarpper, Checkbox, Label } from './styledComponents'\n\nconst manipulateRowData = ({ rowData, labelForKey = '' }) => {\n    //Allowing For Greater Shorthand\n    if (typeof rowData === 'string') {\n        const label = rowData\n        const value = rowData\n        const key = labelForKey + rowData\n        return { label, value, key }\n    } else if (typeof rowData === 'object') {\n        let { label, value: value = label, key: key = labelForKey + label } = rowData\n        return { label, value, key }\n    }\n}\nconst TECheckboxGroup = (props) => {\n    const handleInputChange = (event) => {\n        const { checkedValues, onChange } = props\n        const { value, id } = event.target\n\n        let newValues = [...checkedValues]\n        if (checkedValues) {\n            if (checkedValues.includes(value)) {\n                newValues = newValues.filter((e) => e !== value)\n            } else {\n                newValues.push(value)\n            }\n        }\n        onChange(newValues, id)\n    }\n\n    const {\n        size,\n        last,\n        title,\n        required,\n        rowSize,\n        disabled,\n        checkedValues,\n        buttonArray,\n        labelForKey,\n    } = props\n\n    return (\n        <Container size={size} last={last}>\n            <TELabel disabled={disabled} required={required}>\n                {title}\n            </TELabel>\n            <InputWrapper>\n                {buttonArray &&\n                    buttonArray.map((rowData) => {\n                        const { label, value, key } = manipulateRowData({\n                            rowData,\n                            labelForKey,\n                        })\n\n                        return (\n                            <RowWrarpper key={key} size={rowSize}>\n                                <Checkbox\n                                    value={value}\n                                    onChange={handleInputChange}\n                                    id={key}\n                                    checked={checkedValues && checkedValues.includes(value)}\n                                    disabled={disabled}\n                                />\n                                <Label htmlFor={key} disabled={disabled}>\n                                    {label}\n                                </Label>\n                            </RowWrarpper>\n                        )\n                    })}\n            </InputWrapper>\n        </Container>\n    )\n}\n\nTECheckboxGroup.propTypes = {\n    scrolling: PropTypes.bool,\n    buttonArray: PropTypes.array.isRequired,\n    checkedValues: PropTypes.array.isRequired,\n    labelForKey: PropTypes.string,\n}\n\nTECheckboxGroup.defaultProps = {\n    scrolling: false,\n}\n\nexport default TECheckboxGroup\n"]},"metadata":{},"sourceType":"module"}